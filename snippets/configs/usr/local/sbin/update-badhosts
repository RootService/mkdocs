#!/bin/sh -eu
#
#  **********************************************************************************
#  *                               update-badhosts.sh                               *
#  *                            ------------------------                            *
#  *                                                                                *
#  **********************************************************************************
#  *                                                                                *
#  * MIT License                                                                    *
#  *                                                                                *
#  * Copyright Â© 2016-2025 Markus Kohlmeyer <rootservice@gmail.com>                 *
#  *                                                                                *
#  * Permission is hereby granted, free of charge, to any person obtaining a copy   *
#  * of this software and associated documentation files (the "Software"), to deal  *
#  * in the Software without restriction, including without limitation the rights   *
#  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
#  * copies of the Software, and to permit persons to whom the Software is          *
#  * furnished to do so, subject to the following conditions:                       *
#  *                                                                                *
#  * The above copyright notice and this permission notice shall be included in all *
#  * copies or substantial portions of the Software.                                *
#  *                                                                                *
#  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
#  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
#  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
#  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
#  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
#  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
#  * SOFTWARE.                                                                      *
#  *                                                                                *
#  **********************************************************************************
#

# Environment
export TZ=UTC
export LC_ALL=C
set -o nounset
set -o pipefail

####################################################################################
#                               Configurable Variables                             #
####################################################################################
VERSION="1.0.0"
AUTHORS="Markus Kohlmeyer"
CONTACT="<rootservice@gmail.com>"
COPYRIGHT="Copyright (C) 2016-2025 Markus Kohlmeyer"
REPORTS="https://github.com/RootService/mkdocs"

ALLOWEDOPTS=""
USAGEOPTIONS=""

# Files
LOG_FILE="/var/log/$(basename "$0").log"
TMP_FILE="$(mktemp -q /tmp/$(basename "$0").XXXXXX)" || { show_error "Failed to create temp file"; exit 1; }
MAIL_LOG="/var/log/maillog"
AUTH_LOG="/var/log/auth.log"
TMP_MAIL="/tmp/pf_badhosts_mail"
TMP_SSHD="/tmp/pf_badhosts_sshd"
BADHOSTS_MAIL="/etc/pf.badhosts_mail"
BADHOSTS_SSHD="/etc/pf.badhosts_sshd"

# Directories
TMP_DIR="$(mktemp -d -q /tmp/$(basename "$0").XXXXXX)" || { show_error "Failed to create temp dir"; exit 1; }

# Variables

# Commands

####################################################################################
#                                   Color Output                                   #
####################################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
WHITE='\033[0;37m'
NC='\033[0m'

cecho() { # color, message
  color="$1"; shift
  eval printf \"%b%s%b\\n\" \"\$$color\" \"\$*\" \"\$NC\"
}
cechon() { # color, message (no newline)
  color="$1"; shift
  eval printf \"%b%s%b\" \"\$$color\" \"\$*\" \"\$NC\"
}

####################################################################################
#                                    Logging                                       #
####################################################################################
log() {
  local level="$1"; shift
  local message="$*"
  printf "%s [%s] %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "${level}" "${message}" >> "$LOG_FILE"
}

show_text()  { cecho WHITE "$*"; log TEXT "$*"; }
show_info()  { cecho GREEN "$*"; log INFO "$*"; }
show_warn()  { cecho YELLOW "$*"; log WARN "$*"; }
show_error() { cecho RED "$*"; log ERROR "$*"; }

####################################################################################
#                               Dependency Checks                                  #
####################################################################################
require_cmd() {
  for cmd; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      show_error "Missing dependency: $cmd"
      exit 1
    fi
  done
}
require_cmd whoami cat date tr awk sed grep find xargs cut sort uniq head tail
require_cmd cp mv rm chmod chown mktemp service wc make pfctl whois

####################################################################################
#                                 Utility Functions                                #
####################################################################################
tolower() { [ -n "${1:-}" ] && echo "$*" | tr '[:upper:]' '[:lower:]'; }
toupper() { [ -n "${1:-}" ] && echo "$*" | tr '[:lower:]' '[:upper:]'; }

read_prompt() {
  local prompt="${1}"
  local var="${2:-REPLY}"
  local input=""
  while :; do
    read -r -p "$(cechon WHITE "$prompt ")" input
    if [ -z "$(printf '%s' "$input" | tr -d '\040-\176')" ]; then
      eval "$var=\"\$input\""
      break
    else
      show_warn "Non-printable char(s) detected! Please retry..."
    fi
  done
}

read_passwd() {
  local prompt="${1}"
  local var="${2:-REPLY}"
  local input=""
  while :; do
    read -s -p "$(cechon WHITE "$prompt ")" input
    echo
    if [ -z "$(printf '%s' "$input" | tr -d '\040-\176')" ]; then
      eval "$var=\"\$input\""
      break
    else
      show_warn "Non-printable char(s) detected! Please retry..."
    fi
  done
}

rootonly() {
  [ "$(id -u)" = "0" ] || { show_error "You must be root to run this script!"; exit 1; }
}

print_separator() {
  printf "================================================================================\n"
}

trap 'show_error "Script interrupted. Exiting."; exit 1' INT TERM
trap 'rm -rf "$TMP_DIR" "$TMP_FILE"' EXIT

####################################################################################
#                                 Argument Parsing                                 #
####################################################################################
show_usage() {
  cat <<EOF >&2
Usage: $(basename "$0") [OPTIONS]

OPTIONS:
${USAGEOPTIONS}
  --help            Display this help and exit
  --version         Output version information and exit

${COPYRIGHT} ${CONTACT}

Written by ${AUTHORS}

Report any bugs to: ${REPORTS}
EOF
  exit 1
}

show_version() {
  cat <<EOF >&2
$(basename "$0") ${VERSION}

${COPYRIGHT} ${CONTACT}

Written by ${AUTHORS}

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
  exit 0
}

parse_args() {
  while [ $# -gt 0 ]; do
    case "$1" in
      --*=*)
        tmpopt="${1#--}"
        cmdopt="${tmpopt%%=*}"
        cmdval="${tmpopt#*=}"
        if echo "$ALLOWEDOPTS" | grep -q -w "$cmdopt"; then
          eval "$cmdopt=\"\$cmdval\""
        else
          show_usage
        fi
        ;;
      --version|-V) show_version ;;
      --help|-h) show_usage ;;
      *) show_usage ;;
    esac
    shift
  done
}

####################################################################################
#                                   Main Logic                                     #
####################################################################################
rootonly

parse_args "$@"

print_separator

show_info "Started updating PF badhosts"

print_separator

# Extract mail bad hosts (DNSBL rank)
if [ -f "$MAIL_LOG" ]; then
  {
    awk '/ DNSBL rank / {print $NF}' "$MAIL_LOG"
  } | sort -buV > "$TMP_MAIL"
  if pfctl -t badhosts_mail -T show >> "$TMP_MAIL"; then
    sort -buV "$TMP_MAIL" > "$BADHOSTS_MAIL"
    if pfctl -t badhosts_mail -T add -f "$BADHOSTS_MAIL"; then
      show_info "Success to update and reload pf table $BADHOSTS_MAIL."
    else
      show_error "Failed to update and reload pf table $BADHOSTS_MAIL."
      exit 1
    fi
  fi
else
  show_error "Mail log $MAIL_LOG not found."
  exit 1
fi

print_separator

# Extract sshd bad hosts (reverse mapping, failed logins, etc)
if [ -f "$AUTH_LOG" ]; then
  {
    awk '/: reverse mapping checking getaddrinfo for / {print $(NF-1)}' "$AUTH_LOG"
    awk '/: Did not receive identification string from / {print $12}' "$AUTH_LOG"
    awk '/: Bad protocol version identification / {print $(NF-2)}' "$AUTH_LOG"
    awk '/: banner exchange: Connection from / {print $10}' "$AUTH_LOG"
    awk '/: Unable to negotiate with / {print $10}' "$AUTH_LOG"
    awk '/: Connection closed by / {print $9}' "$AUTH_LOG"
    awk '/: Connection reset by / {print $9}' "$AUTH_LOG"
    awk '/: Failed password for / {print $11}' "$AUTH_LOG"
    awk '/: Invalid user / {print $(NF-2)}' "$AUTH_LOG"
  } | sort -buV > "$TMP_SSHD"
  if pfctl -t badhosts_mail -T show >> "$TMP_SSHD"; then
    sort -buV "$TMP_SSHD" > "$BADHOSTS_SSHD"
    if pfctl -t badhosts_sshd -T add -f "$BADHOSTS_SSHD"; then
      show_info "Success to update and reload pf table $BADHOSTS_SSHD."
    else
      show_error "Failed to update and reload pf table $BADHOSTS_SSHD."
      exit 1
    fi
  fi
else
  show_error "Auth log $AUTH_LOG not found."
  exit 1
fi

print_separator

show_info "Finished updating PF badhosts"

print_separator

exit 0
