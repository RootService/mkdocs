#!/bin/sh
#
#  **********************************************************************************
#  *                             update-spamassassin.sh                             *
#  *                            ------------------------                            *
#  *                                                                                *
#  **********************************************************************************
#  *                                                                                *
#  * MIT License                                                                    *
#  *                                                                                *
#  * Copyright Â© 2016-2025 Markus Kohlmeyer <rootservice@gmail.com>                 *
#  *                                                                                *
#  * Permission is hereby granted, free of charge, to any person obtaining a copy   *
#  * of this software and associated documentation files (the "Software"), to deal  *
#  * in the Software without restriction, including without limitation the rights   *
#  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
#  * copies of the Software, and to permit persons to whom the Software is          *
#  * furnished to do so, subject to the following conditions:                       *
#  *                                                                                *
#  * The above copyright notice and this permission notice shall be included in all *
#  * copies or substantial portions of the Software.                                *
#  *                                                                                *
#  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
#  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
#  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
#  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
#  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
#  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
#  * SOFTWARE.                                                                      *
#  *                                                                                *
#  **********************************************************************************
#

# Environment
export TZ=UTC0
export LC_ALL=C
set -eu
set -o pipefail

####################################################################################
#                               Configurable Variables                             #
####################################################################################
VERSION="1.0.0"
AUTHORS="Markus Kohlmeyer"
CONTACT="<rootservice@gmail.com>"
COPYRIGHT="Copyright (C) 2016-2025 Markus Kohlmeyer"
REPORTS="https://github.com/RootService/mkdocs"

ALLOWEDOPTS=""
USAGEOPTIONS=""

# Files
LOG_FILE="/var/log/$(basename "$0").log"
TMP_FILE="$(mktemp -q /tmp/$(basename "$0").XXXXXX || exit 1)"

# Directories
TMP_DIR="$(mktemp -d -q /tmp/$(basename "$0").XXXXXX || exit 1)"

# Variables

# Commands
SA_UPDATE_CMD="/usr/local/bin/sa-update"
SA_COMPILE_CMD="/usr/local/bin/sa-compile"


####################################################################################
#                                   Color Output                                   #
####################################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
WHITE='\033[0;37m'
NC='\033[0m'

cecho() { # color, message
  color="$1"; shift
  eval printf \"%b%s%b\\n\" \"\$$color\" \"\$*\" \"\$NC\"
}
cechon() { # color, message (no newline)
  color="$1"; shift
  eval printf \"%b%s%b\" \"\$$color\" \"\$*\" \"\$NC\"
}

####################################################################################
#                                    Logging                                       #
####################################################################################
log() {
  local level="$1"; shift
  local message="$*"
  printf "%s [%s] %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "${level}" "${message}" >> "$LOG_FILE"
}

show_text()  { cecho WHITE "$*"; log TEXT "$*"; }
show_info()  { cecho GREEN "$*"; log INFO "$*"; }
show_warn()  { cecho YELLOW "$*"; log WARN "$*"; }
show_error() { cecho RED "$*"; log ERROR "$*"; }

####################################################################################
#                               Dependency Checks                                  #
####################################################################################
require_cmd() {
  for cmd; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      show_error "Missing dependency: $cmd"
      exit 1
    fi
  done
}
require_cmd whoami cat date tr awk sed grep find xargs cut sort uniq head tail
require_cmd cp mv rm chmod chown mktemp service wc make pfctl whois
require_cmd "$SA_UPDATE_CMD" "$SA_COMPILE_CMD"

####################################################################################
#                                 Utility Functions                                #
####################################################################################
tolower() { [ -n "${1:-}" ] && echo "$*" | tr '[:upper:]' '[:lower:]'; }
toupper() { [ -n "${1:-}" ] && echo "$*" | tr '[:lower:]' '[:upper:]'; }

read_prompt() {
  local prompt="${1}"
  local var="${2:-REPLY}"
  local input=""
  while :; do
    read -r -p "$(cechon WHITE "$prompt ")" input
    if [ -z "$(printf '%s' "$input" | tr -d '\040-\176')" ]; then
      eval "$var=\"\$input\""
      break
    else
      show_warn "Non-printable char(s) detected! Please retry..."
    fi
  done
}

read_passwd() {
  local prompt="${1}"
  local var="${2:-REPLY}"
  local input=""
  while :; do
    read -s -p "$(cechon WHITE "$prompt ")" input
    echo
    if [ -z "$(printf '%s' "$input" | tr -d '\040-\176')" ]; then
      eval "$var=\"\$input\""
      break
    else
      show_warn "Non-printable char(s) detected! Please retry..."
    fi
  done
}

rootonly() {
  [ "$(id -u)" = "0" ] || { show_error "You must be root to run this script!"; exit 1; }
}

print_separator() {
  printf "================================================================================\n"
}

trap 'show_error "Script interrupted. Exiting."; exit 1' INT TERM
trap 'rm -rf $TMP_DIR $TMP_FILE; exit 1' EXIT

####################################################################################
#                                 Argument Parsing                                 #
####################################################################################
show_usage() {
  cat <<EOF >&2
Usage: $(basename "$0") [OPTIONS]

OPTIONS:
${USAGEOPTIONS}
  --help            Display this help and exit
  --version         Output version information and exit

${COPYRIGHT} ${CONTACT}

Written by ${AUTHORS}

Report any bugs to: ${REPORTS}
EOF
  exit 1
}

show_version() {
  cat <<EOF >&2
$(basename "$0") ${VERSION}

${COPYRIGHT} ${CONTACT}

Written by ${AUTHORS}

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
  exit 0
}

parse_args() {
  while [ $# -gt 0 ]; do
    case "$1" in
      --*=*)
        tmpopt="${1#--}"
        cmdopt="${tmpopt%%=*}"
        cmdval="${tmpopt#*=}"
        if echo "$ALLOWEDOPTS" | grep -q -w "$cmdopt"; then
          eval "$cmdopt=\"\$cmdval\""
        else
          show_usage
        fi
        ;;
      --version|-V) show_version ;;
      --help|-h) show_usage ;;
      *) show_usage ;;
    esac
    shift
  done
}

####################################################################################
#                                   Main Logic                                     #
####################################################################################
rootonly

parse_args "$@"

print_separator

show_info "Started updating the spamassassin filters."

print_separator

# Update spamassassin channel updates.spamassassin.org mirrors
show_info "Update spamassassin channel updates.spamassassin.org mirrors..."
if ! "$SA_UPDATE_CMD" --channel updates.spamassassin.org --refreshmirrors --verbose; then
  show_warn "Update spamassassin channel updates.spamassassin.org mirrors failed."
#  exit 1
fi

# Update spamassassin channel updates.spamassassin.org rules
show_info "Update spamassassin channel updates.spamassassin.org rules..."
if ! "$SA_UPDATE_CMD" --channel updates.spamassassin.org --verbose; then
  show_warn "Update spamassassin channel updates.spamassassin.org rules failed."
#  exit 1
fi

# Update spamassassin channel kam.sa-channels.mcgrail.com mirrors
show_info "Update spamassassin channel kam.sa-channels.mcgrail.com mirrors..."
if ! "$SA_UPDATE_CMD" --nogpg --channel kam.sa-channels.mcgrail.com --refreshmirrors --verbose; then
  show_warn "Update spamassassin channel kam.sa-channels.mcgrail.com mirrors failed."
#  exit 1
fi

# Update spamassassin channel kam.sa-channels.mcgrail.com rules
show_info "Update spamassassin channel kam.sa-channels.mcgrail.com rules..."
if ! "$SA_UPDATE_CMD" --nogpg --channel kam.sa-channels.mcgrail.com --verbose; then
  show_warn "Update spamassassin channel kam.sa-channels.mcgrail.com rules failed."
#  exit 1
fi

# Rebuilding spamassassin rulesets
show_info "Rebuilding spamassassin rulesets..."
if ! "$SA_COMPILE_CMD" --quiet; then
  show_warn "Failed rebuilding spamassassin rulesets."
#  exit 1
fi

print_separator

# Restarting sa-spamd
show_info "Restarting sa-spamd..."
if ! service sa-spamd restart; then
  show_warn "Failed restarting sa-spamd."
#  exit 1
fi

# Reloading amavisd
show_info "Reloading amavisd..."
if ! service amavisd reload; then
  show_warn "Failed reloading amavisd."
#  exit 1
fi

print_separator

show_info "Finished updating the spamassassin filters."

print_separator

exit 0
