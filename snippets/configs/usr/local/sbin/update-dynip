#!/bin/sh
#
#  **********************************************************************************
#  *                                 update-dynip.sh                                *
#  *                            ------------------------                            *
#  *                                                                                *
#  **********************************************************************************
#  *                                                                                *
#  * MIT License                                                                    *
#  *                                                                                *
#  * Copyright Â© 2016-2025 Markus Kohlmeyer <rootservice@gmail.com>                 *
#  *                                                                                *
#  * Permission is hereby granted, free of charge, to any person obtaining a copy   *
#  * of this software and associated documentation files (the "Software"), to deal  *
#  * in the Software without restriction, including without limitation the rights   *
#  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      *
#  * copies of the Software, and to permit persons to whom the Software is          *
#  * furnished to do so, subject to the following conditions:                       *
#  *                                                                                *
#  * The above copyright notice and this permission notice shall be included in all *
#  * copies or substantial portions of the Software.                                *
#  *                                                                                *
#  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     *
#  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       *
#  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    *
#  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         *
#  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  *
#  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  *
#  * SOFTWARE.                                                                      *
#  *                                                                                *
#  **********************************************************************************
#

# Environment
export TZ=UTC0
export LC_ALL=C
set -eu
set -o pipefail

####################################################################################
#                               Configurable Variables                             #
####################################################################################
VERSION="1.0.0"
AUTHORS="Markus Kohlmeyer"
CONTACT="<rootservice@gmail.com>"
COPYRIGHT="Copyright (C) 2016-2025 Markus Kohlmeyer"
REPORTS="https://github.com/RootService/mkdocs"

ALLOWEDOPTS=""
USAGEOPTIONS=""

# Files
LOG_FILE="/var/log/$(basename "$0").log"
TMP_FILE="$(mktemp -q /tmp/$(basename "$0").XXXXXX || exit 1)"
PF_INTERNAL_FILE="/etc/pf.internal"
HOSTS_FILE="/etc/hosts"

# Directories
TMP_DIR="$(mktemp -q -t /tmp/$(basename "$0").XXXXXX || exit 1)"

# Variables
DOMAIN="devnoip.example.com"

# Commands
DRILL_CMD="/usr/local/bin/drill"

####################################################################################
#                                   Color Output                                   #
####################################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
WHITE='\033[0;37m'
NC='\033[0m'

cecho() { # color, message
  color="$1"; shift
  eval printf \"%b%s%b\\n\" \"\$$color\" \"\$*\" \"\$NC\"
}
cechon() { # color, message (no newline)
  color="$1"; shift
  eval printf \"%b%s%b\" \"\$$color\" \"\$*\" \"\$NC\"
}

####################################################################################
#                                    Logging                                       #
####################################################################################
log() {
  local level="$1"; shift
  local message="$*"
  printf "%s [%s] %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "${level}" "${message}" >> "$LOG_FILE"
}

show_text()  { cecho WHITE "$*"; log TEXT "$*"; }
show_info()  { cecho GREEN "$*"; log INFO "$*"; }
show_warn()  { cecho YELLOW "$*"; log WARN "$*"; }
show_error() { cecho RED "$*"; log ERROR "$*"; }

####################################################################################
#                               Dependency Checks                                  #
####################################################################################
require_cmd() {
  for cmd; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      show_error "Missing dependency: $cmd"
      exit 1
    fi
  done
}
require_cmd echo printf cat date tr awk sed grep find xargs cut sort uniq head tail
require_cmd cp mv rm chmod chown whoami mktemp service wc make pfctl whois
require_cmd "$DRILL_CMD"

####################################################################################
#                                 Utility Functions                                #
####################################################################################
tolower() { [ -n "${1:-}" ] && echo "$*" | tr '[:upper:]' '[:lower:]'; }
toupper() { [ -n "${1:-}" ] && echo "$*" | tr '[:lower:]' '[:upper:]'; }

read_prompt() {
  local prompt="${1}"
  local var="${2:-REPLY}"
  local input=""
  while :; do
    read -r -p "$(cechon WHITE "$prompt ")" input
    if [ -z "$(printf '%s' "$input" | tr -d '\040-\176')" ]; then
      eval "$var=\"\$input\""
      break
    else
      show_warn "Non-printable char(s) detected! Please retry..."
    fi
  done
}

read_passwd() {
  local prompt="${1}"
  local var="${2:-REPLY}"
  local input=""
  while :; do
    read -s -p "$(cechon WHITE "$prompt ")" input
    echo
    if [ -z "$(printf '%s' "$input" | tr -d '\040-\176')" ]; then
      eval "$var=\"\$input\""
      break
    else
      show_warn "Non-printable char(s) detected! Please retry..."
    fi
  done
}

rootonly() {
  [ "$(id -u)" = "0" ] || { show_error "You must be root to run this script!"; exit 1; }
}

print_separator() {
  printf "================================================================================\n"
}

trap 'show_error "Script interrupted. Exiting."; rm -rf $TMP_DIR $TMP_FILE; exit 1' INT TERM EXIT

####################################################################################
#                                 Argument Parsing                                 #
####################################################################################
show_usage() {
  cat <<EOF >&2
Usage: $(basename "$0") [OPTIONS]

OPTIONS:
${USAGEOPTIONS}
  --help            Display this help and exit
  --version         Output version information and exit

${COPYRIGHT} ${CONTACT}

Written by ${AUTHORS}

Report any bugs to: ${REPORTS}
EOF
  exit 1
}

show_version() {
  cat <<EOF >&2
$(basename "$0") ${VERSION}

${COPYRIGHT} ${CONTACT}

Written by ${AUTHORS}

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
  exit 0
}

parse_args() {
  while [ $# -gt 0 ]; do
    case "$1" in
      --*=*)
        tmpopt="${1#--}"
        cmdopt="${tmpopt%%=*}"
        cmdval="${tmpopt#*=}"
        if echo "$ALLOWEDOPTS" | grep -q -w "$cmdopt"; then
          eval "$cmdopt=\"\$cmdval\""
        else
          show_usage
        fi
        ;;
      --version|-V) show_version ;;
      --help|-h) show_usage ;;
      *) show_usage ;;
    esac
    shift
  done
}

####################################################################################
#                                   Main Logic                                     #
####################################################################################
rootonly

parse_args "$@"

# Extract valid global IPv4 and IPv6 addresses, exclude local and private ranges
extract_ips() {
  grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}|([A-Fa-f0-9:]+:+)+[A-Fa-f0-9]+' \
    | grep -Ev '(^127\.|^10\.|^192\.168\.|^172\.(1[6-9]|2[0-9]|3[01]))' \
    | grep -Ev '(^::1$|^fc00:|^fd00:|^fe80:)'
}

# Get current IPv4 and IPv6 addresses
get_ip() {
  local type=$1
  "$DRILL_CMD" -a "$DOMAIN" @127.0.0.1 "$type" | awk '/^'"$DOMAIN"'/ {print $NF}' | head -n 1
}

print_separator

show_info "Started updating dynip for $DOMAIN"

print_separator

IPV4="$(get_ip "A" || true)"
IPV6="$(get_ip "AAAA" || true)"

if [ -z "$IPV4" ]; then
  show_error "Could not resolve IPv4 for $DOMAIN"
  exit 1
fi

if [ -z "$IPV6" ]; then
  show_error "Could not resolve IPv6 for $DOMAIN"
  exit 1
fi

#if ! extract_ips "$IPV4"; then
#  show_error "Invalid IPv4 address resolved: $IPV4"
#  exit 1
#fi

#if ! extract_ips "$IPV6"; then
#  show_error "Invalid IPv6 address resolved: $IPV6"
#  exit 1
#fi

show_info "Resolved IPv4: $IPV4, IPv6: $IPV6"

print_separator

# Update /etc/hosts and /etc/pf.internal with new IPs
update_entries() {
  local ip=$1
  local mask=$2
  if [ -n "$ip" ] && [ "$ip" != "record" ]; then
    echo "$ip/$mask" >> "$PF_INTERNAL_FILE"
    echo "$ip ${DOMAIN%.*} $DOMAIN" >> "$HOSTS_FILE"
    show_info "Added $ip/$mask to $PF_INTERNAL_FILE and $HOSTS_FILE"
  fi
}

# Update /etc/hosts
cat <<EOF > "$HOSTS_FILE"
::1                        localhost localhost.localdomain devnull devnull.example.com
127.0.0.1                  localhost localhost.localdomain devnull devnull.example.com
EOF

# Update /etc/pf.internal
cat <<EOF > "$PF_INTERNAL_FILE"
fe80::/10
ff02::/16
10.0.0.0/8
EOF

update_entries "$IPV4" "32"
update_entries "$IPV6" "64"

# Set appropriate permissions
chmod 0644 "$HOSTS_FILE"
chmod 0600 "$PF_INTERNAL_FILE"

show_info "Successfully updated $HOSTS_FILE and $PF_INTERNAL_FILE"

print_separator

# Reload PF table
if pfctl -t internal -T replace -f "$PF_INTERNAL_FILE"; then
  show_info "Success to update and reload pf table $PF_INTERNAL_FILE."
else
  show_error "Failed to update and reload pf table $PF_INTERNAL_FILE."
  exit 1
fi

print_separator

show_info "Finished updating dynip for $DOMAIN"

print_separator

exit 0
