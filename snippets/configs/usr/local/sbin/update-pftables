#!/bin/sh -eu
#
#  **********************************************************************************
#  *                               update-pftables.sh                               *
#  *                            ------------------------                            *
#  *                                                                                *
#  **********************************************************************************
#  * MIT License                                                                    *
#  * Copyright Â© 2016-2025 Markus Kohlmeyer <rootservice@gmail.com>                 *
#  **********************************************************************************
#
#   FreeBSD PF table updater script
#   Requires: pfctl, curl, expiretable, whois, awk, sed, mktemp, etc.
#
#   Usage: update-pftables [--help] [--version]
#

# Strict execution and locale
export TZ=UTC
export LC_ALL=C
set -o nounset
set -o pipefail

####################################################################################
#                               Configurable Variables                             #
####################################################################################
VERSION="1.1.0"
AUTHORS="Markus Kohlmeyer"
CONTACT="<rootservice@gmail.com>"
COPYRIGHT="Copyright (C) 2016-2025 Markus Kohlmeyer"
REPORTS="https://github.com/RootService/mkdocs"

# Files & Directories
LOG_FILE="/var/log/$(basename "$0").log"
TMP_DIR="$(mktemp -d -q /tmp/$(basename "$0").XXXXXX)" || { echo "Failed to create TMP_DIR"; exit 1; }
TMP_FILE="$(mktemp -q /tmp/$(basename "$0").XXXXXX)" || { echo "Failed to create TMP_FILE"; exit 1; }

# User agent
USER_AGENT="Mozilla/5.0 (FreeBSD 14.3; x86_64; x64; rv:142.0) Gecko/20100101 Firefox/142.0"

# Commands
CURL_CMD="/usr/local/bin/curl"
EXPIRETABLE_CMD="/usr/local/sbin/expiretable"

####################################################################################
#                                   Color Output                                   #
####################################################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
WHITE='\033[0;37m'
NC='\033[0m'

cecho() { # color, message
  color="$1"; shift
  eval printf \"%b%s%b\\n\" \"\$$color\" \"\$*\" \"\$NC\"
}
cechon() { # color, message (no newline)
  color="$1"; shift
  eval printf \"%b%s%b\" \"\$$color\" \"\$*\" \"\$NC\"
}

####################################################################################
#                                    Logging                                       #
####################################################################################
log() {
  local level="$1"; shift
  local message="$*"
  printf "%s [%s] %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "${level}" "${message}" >> "$LOG_FILE"
}

show_text()  { cecho WHITE "$*"; log TEXT "$*"; }
show_info()  { cecho GREEN "$*"; log INFO "$*"; }
show_warn()  { cecho YELLOW "$*"; log WARN "$*"; }
show_error() { cecho RED "$*"; log ERROR "$*"; }

####################################################################################
#                               Dependency Checks                                  #
####################################################################################
require_cmd() {
  for cmd; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      show_error "Missing dependency: $cmd"
      exit 1
    fi
  done
}
require_cmd whoami cat date tr awk sed grep find xargs cut sort uniq head tail
require_cmd cp mv rm chmod chown mktemp service wc make pfctl whois
require_cmd "$CURL_CMD" "$EXPIRETABLE_CMD"

####################################################################################
#                                 Utility Functions                                #
####################################################################################
tolower() { [ -n "${1:-}" ] && echo "$*" | tr '[:upper:]' '[:lower:]'; }
toupper() { [ -n "${1:-}" ] && echo "$*" | tr '[:lower:]' '[:upper:]'; }

read_prompt() {
  local prompt="${1}"
  local var="${2:-REPLY}"
  local input=""
  while :; do
    read -r -p "$(cechon WHITE "$prompt ")" input
    if [ -z "$(printf '%s' "$input" | tr -d '\040-\176')" ]; then
      eval "$var=\"\$input\""
      break
    else
      show_warn "Non-printable char(s) detected! Please retry..."
    fi
  done
}

read_passwd() {
  local prompt="${1}"
  local var="${2:-REPLY}"
  local input=""
  while :; do
    read -s -p "$(cechon WHITE "$prompt ")" input
    echo
    if [ -z "$(printf '%s' "$input" | tr -d '\040-\176')" ]; then
      eval "$var=\"\$input\""
      break
    else
      show_warn "Non-printable char(s) detected! Please retry..."
    fi
  done
}

rootonly() {
  [ "$(id -u)" = "0" ] || { show_error "You must be root to run this script!"; exit 1; }
}

print_separator() {
  printf "================================================================================\n"
}

cleanup() {
  rm -rf "$TMP_DIR" "$TMP_FILE"
}

trap 'show_error "Script interrupted. Exiting."; cleanup; exit 1' INT TERM
trap 'cleanup' EXIT

####################################################################################
#                                 Argument Parsing                                 #
####################################################################################
show_usage() {
  cat <<EOF >&2
Usage: $(basename "$0") [OPTIONS]

OPTIONS:
  --help            Display this help and exit
  --version         Output version information and exit

${COPYRIGHT} ${CONTACT}
Written by ${AUTHORS}
Report any bugs to: ${REPORTS}
EOF
  exit 1
}

show_version() {
  cat <<EOF >&2
$(basename "$0") ${VERSION}

${COPYRIGHT} ${CONTACT}
Written by ${AUTHORS}
MIT License
EOF
  exit 0
}

parse_args() {
  while [ $# -gt 0 ]; do
    case "$1" in
      --version|-V) show_version ;;
      --help|-h) show_usage ;;
      *) show_usage ;;
    esac
    shift
  done
}

####################################################################################
#                                   Main Logic                                     #
####################################################################################
rootonly
parse_args "$@"

print_separator
show_info "Started updating the PF bad hosts tables."
print_separator

pasthours="`date -u -v-6H`"
lasthours="`date -j -f "%a %b %d %T %Z %Y" "${pasthours}" "+%H:%M"`"

show_text ""
show_info "${lasthours}"
show_text ""

print_separator

fetch_data() {
  local url="$1"
  local output="$2"
  if ! "$CURL_CMD" --fail --silent --show-error --progress-bar --compressed --ignore-content-length \
    --header "User-Agent: Mozilla/5.0 (FreeBSD 14.3; x86_64; x64; rv:142.0) Gecko/20100101 Firefox/142.0" \
    --header "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
    --header "Accept-Encoding: gzip, deflate, br" --header "Accept-Language: en,de;q=0.5" \
    --header "DNT: 1" --header "Cache-Control: max-age=0" --header "Connection: keep-alive" \
    --header "Referer: https://localhost/" --tlsv1.2 --location "$url" --output "$output"
  then
    show_error "Failed to fetch $url"
    exit 1
  fi
}

replace_table() {
  local table="$1"
  local expire="$2"
  local external="${3:-}"
  show_text ""
  print_separator
  show_info "Table $table"
  print_separator
  # Merge input (if provided) and current table
  if [ -n "$external" ] && [ -f "$external" ]; then
    cat -- "$external" > "$TMP_DIR/$table.txt"
  else
    : > "$TMP_DIR/$table.txt"
  fi
  pfctl -t "$table" -T show >> "$TMP_DIR/$table.txt"
  sort -buV "$TMP_DIR/$table.txt" > "$TMP_DIR/$table.sorted"
  if ! pfctl -t "$table" -T replace -f "$TMP_DIR/$table.sorted"; then
    show_error "Failed to replace PF table $table"
    exit 1
  fi
  show_info "Updated table $table with $(wc -l < "$TMP_DIR/$table.sorted") entries."
  "$EXPIRETABLE_CMD" -v -t "$expire" "$table"
  show_text ""
  pfctl -t "$table" -v -T show
}

# Fetch and update badhosts_drop
fetch_data "https://www.spamhaus.org/drop/drop_v4.json" "$TMP_DIR/drop_v4.json"
fetch_data "https://www.spamhaus.org/drop/drop_v6.json" "$TMP_DIR/drop_v6.json"
fetch_data "https://www.spamhaus.org/drop/asndrop.json" "$TMP_DIR/asndrop.json"
awk -F'"' '/cidr/ { print $4 }' "$TMP_DIR/drop_v4.json" > "$TMP_DIR/drop_v4.txt"
awk -F'"' '/cidr/ { print $4 }' "$TMP_DIR/drop_v6.json" > "$TMP_DIR/drop_v6.txt"
awk -F'"' '/asn/ { print $3 }' "$TMP_DIR/asndrop.json" | sed -e 's|^:\([0-9]*\),$|AS\1|g' > "$TMP_DIR/asndrop.txt"
: > "$TMP_DIR/asntoip.txt"
while read -r asn; do
  [ -z "$asn" ] && continue
  whois -h whois.radb.net -- "-i origin $asn" | awk '/^route/ { print $2 }' >> "$TMP_DIR/asntoip.txt"
done < "$TMP_DIR/asndrop.txt"
awk '!/^;/ { print "   " $1 }' "$TMP_DIR/drop_v4.txt" "$TMP_DIR/drop_v6.txt" "$TMP_DIR/asntoip.txt" > "$TMP_DIR/badhosts_drop.tmp"

# Fetch and update badhosts_torp
fetch_data "https://www.dan.me.uk/torlist/?full" "$TMP_DIR/torlist.txt"
awk '!/^;/ { print "   " $1 }' "$TMP_DIR/torlist.txt" > "$TMP_DIR/badhosts_torp.tmp"

# Fetch and update badhosts_misc
fetch_data "https://lists.blocklist.de/lists/all.txt" "$TMP_DIR/blocklist.txt"
awk '!/^;/ { print "   " $1 }' "$TMP_DIR/blocklist.txt" > "$TMP_DIR/badhosts_misc.tmp"

# Table definitions: "table_name:expire:optional_external_file"
TABLES="
badhosts_priv:90d:
badhosts_http:7d:
badhosts_mail:1d:
badhosts_sshd:6h:
badhosts_drop:90d:$TMP_DIR/badhosts_drop.tmp
badhosts_torp:2d:$TMP_DIR/badhosts_torp.tmp
badhosts_misc:2d:$TMP_DIR/badhosts_misc.tmp
"

for entry in $TABLES; do
  table="${entry%%:*}"
  rest="${entry#*:}"
  expire="${rest%%:*}"
  external="${rest#*:}"
  replace_table "$table" "$expire" "$external"
done

show_text ""
print_separator
show_info "PF Statistics"
print_separator
pfctl -v -v -s all
show_text ""
print_separator
show_info "Finished updating the PF bad hosts tables."
print_separator

exit 0
